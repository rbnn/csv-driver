#!/bin/bash

# Author:   Ronny Biemann
#           Copyright 2016
# File:     xcut
# License:  GPL-3.0

set -e
source xbase

declare -r program_name=${0##*/}
declare -r default_xcut_flags=
declare -r egrep_backend=$(find_program_like ${egrep_like_programs[@]})
declare -r getopt_backend=$(find_program_like ${getopt_like_programs[@]})
declare -r cut_backend=$(find_program_like ${cut_like_programs[@]})

# Initialize default field-separator
fsep=$(set_fsep)

# Parse command line arguments and feed parsed arguments
declare -r args=$(${getopt_backend} --options=dhf:t: \
  --longoptions=help,complement,regex:,unique \
  --name="${program_name}" -- "$@")
eval set -- "$args"

# Parse arguments
while true; do
  case $1 in
  -d) # Enable dry-run mode
    dry_run=1
    shift
    ;;

  -f) # Append list of fields
    IFS=, read -r -a tmp_field <<< "${2}"
    fields=(${fields[@]} ${tmp_field[@]})
    shift 2
    ;;

  -t) # Update field-separator
    fsep=$(set_fsep ${2})
    shift 2
    ;;

  --complement) # Use complement of field selection
    select_complement=1
    shift
    ;;

  --regex) # Use regular expression to select fields
    regex_fields=(${regex_fields[@]} "${2}")
    shift 2
    ;;

  --unique) # Select unique columns
    unique_fields=1
    shift
    ;;
    
  -h|--help)
    cat << EOF
Usage: ${program_name} [OPT] [-- ...]

Select columns from input by column names. The input is read from standard
input.

Available flags for OPT:
  -d
    Enable dry-run mode. The backend will not be invoked, but the configured
    command will be written to standard output.
    
  -f FIELDS
    Select FIELDS for output. FIELDS might either be a single field name or a
    comma separated list of field names.

  -t FS
    $(fsep_help_message)

  --complement
    Complement the set of selected fields

  --regex=EXPR[:EXPR_OPT]    (backend: ${egrep_backend} [EXPR_OPT])
    Select fields, if their names match at least one regular EXPRession.
    Optionally EXPR_OPT may be specified to passed directly to the backend.

  --unique
    Select unique fields and drop duplicate columns. This selects the FIRST
    occurence of each column as unique.

  -h, --help
    $(help_help_message)

$(getopt_help_message "${program_name}" "${cut_backend}" XCUT_FLAGS "${default_xcut_flags}")

Backend: ${cut_backend}
EOF
    shift
    exit 0
    ;;

  --)
    shift
    break
    ;;
  esac
done

# # Coreutils' cut program expects
# # Fields must be unique
# num_fields=${#fields[@]}
# num_unique=($(printf "%s\n" "${fields[@]}" | sort -u | wc -l))
# [ $num_fields -ne $num_unique ] && die -1 "Selected fields must be unique!"

# Read first row and keep stdin open
IFS= read -r raw_header

# Parse head line into arrays x_fields and x_flags. x_fields will contain all
# field names found in the header, while x_flags contains all sort-flags like
# `n' or `g'.
parse_header "${raw_header}" "${fsep}" x_

# enable_debug=yes
# # declare -a fields
# Select all fields, that match at least one regular expression. Therefore all
# field names are matched against all regular expressions using egrep.
for full_regexp in "${regex_fields[@]}"; do
  # Strip :EXPR_OPT from input
  regexp=${full_regexp%%:*}
  # Extract EXPR_OPT from input (if available)
  regopt=${full_regexp:$((${#regexp} + 1))}

  debug "Regular expression: \`${regexp}' [${regopt}]"

  for fname in "${x_fields[@]}"; do
    ${egrep_backend} ${regopt} "${regexp}" <<<"${fname}" > /dev/null && fields=(${fields[@]} ${fname})
  done
done

# Find columns in x_fields and store indices into x_index and x_found. These
# indices are zero-based.
case "${unique_fields:-0}" in
1)  select_unique_fields x_fields[@] x_;;
*)  locate_fields x_fields[@] x_ ${fields[@]};;
esac

((0 < ${#x_index[@]})) || die -1 "Invalid number of columns!"

# Build final command
cmd="${cut_backend} -d${fsep}"

# Did the use want to complement his selection?
[ 0 -lt ${select_complement:-0} ] && cmd+=" --complement"

# Pass selected fields to cut via commandline options. Field are now identified
# by their field index. These indices are zero-based, but cut expects them to
# be one-based. Therefore we simply need do add one to all indices and we're
# done.
declare -a x_column
for idx in "${x_index[@]}"; do x_column+=("$((idx + 1))"); done
cmd+=" -f "$(join_by x_column[@] ,)

# Add non-option arguments and other options
cmd+=" $@ ${XCUT_FLAGS:-${default_xcut_flags}}"
declare -r cmd

# Specific behaviour, if the dry-run mode is set. In case dry-run mode was
# selected, no external program shall be excuted but only print the commands
# that WOULD be executed.
if [ 0 -eq ${dry_run:-0} ]; then
  # Prepend header, as we're not in dry-run mode
  (echo "${raw_header}"; cat ) | eval ${cmd}
else
  # Print current command
  echo "${cmd}"
fi

# Report success to shell
exit 0
