#!/bin/sh

set -e
source xbase

declare -r program_name=${0##*/}
declare -r default_xheader_non_ascii=_
declare -r getopt_backend=$(find_program_like ${getopt_like_programs[@]})
declare -r fgrep_backend=$(find_program_like ${fgrep_like_programs[@]})

# Initialize default field-separator
fsep=$(set_fsep)

# Parse command line arguments and feed parsed arguments
declare -r args=$(${getopt_backend} --options=dhi:r:t: \
  --longoptions=append:,prepend:,help,insert:,replace:,delete,split:,only::,ascii::,unique,prefix:,suffix: \
  --name="${program_name}" -- "$@")
eval set -- "${args}"

# Parse arguments
while true; do
  case ${1} in
  --append)
    # Append to header
    append=${2}
    shift 2
    ;;

  --prepend) # Prepend to header
    prepend=${2}
    shift 2
    ;;

  --prefix) # Add prefix
    prefix=${2}
    shift 2
    ;;

  --suffix) # Add suffix
    suffix=${2}
    shift 2
    ;;

  --ascii) # Make ascii-header
    non_ascii=${2:-${default_xheader_non_ascii}}
    shift 2
    ;;

  -i|--insert) # Insert new header as first line
    insert=${2}
    shift 2
    ;;

  -r|--replace) # Replace current header
    replace=${2}
    shift 2
    ;;

  -d|--delete) # Delete current header
    delete=1
    shift
    ;;

  --split) # Split data into header and body
    split=${2}
    shift 2
    ;;

  --only) # Print current header but don't print data
    case ${2} in
    list) only=list ;;
    *)    only=yes ;;
    esac
    shift 2
    ;;

  -t) # Change field sepearator (default is comma)
    fsep=$(set_fsep ${2})
    shift 2
    ;;

  --unique) # Remove repeated headers
    unique=1
    shift
    ;;

  -h|--help)
    cat << EOF
Usage: ${program_name} [OPT]

Manipulate header of input data.

Available flags for OPT:
  --append=FIELD
    Append FIELD to header.

  --prepend=FIELD
    Prepend FIELD to header.

  --prefix=PREFIX
    Add PREFIX to field names.

  --suffix=SUFFIX
    Add SUFFIX to field names.
    
  --ascii[=CHAR]
    Replace all non-ascii characters in header by CHAR (default is \`${default_xheader_non_ascii}').

  -i, --inster=STR
    Insert STR as header.

  -r, --replace=STR
    Replace header by STR.

  -d, --delete
    Delete header.

  --split=FILE
    Write header to FILE.

  --only[=list]
    Only print header and skip data. If \`list' is given, then the header
    fields will be printet line by line. Otherwise a single head line is
    printed.

  -t FS
    $(fsep_help_message)

  --unique
    Suppress multiple header occurrences.

  -h, --help
    $(help_help_message)
EOF
    exit 0
    ;;

  --)
    shift
    break
    ;;
  esac
done

declare -r insert
declare -r replace

# Insert header or read from input
if [ -n "${insert}" ]; then raw_header="${insert}"
else IFS= read -r raw_header
fi

# Replace header
[ -n "${replace}" ] && raw_header="${replace}"

# Make ascii-header, i.e. replace non-ascii characters by `_'
[ -n "${non_ascii}" ] && raw_header=$(tr -c "[[:alnum:]${fsep}\n]" "${non_ascii}" <<< "${raw_header}")
declare -r raw_header

parse_header "${raw_header}" "${fsep}" x_
[ -n "${prepend}" ] && x_fields=("${prepend}" "${x_fields[@]}")
[ -n "${append}" ] && x_fields=("${x_fields[@]}" "${append}")

[ -n "${prefix}" ] && add_prefix_to_fields x_fields[@] "${prefix}" x_
[ -n "${suffix}" ] && add_suffix_to_fields x_fields[@] "${suffix}" x_

# Delete header (better: Don't delete header)
[ 0 -eq ${delete:-0} ] && ( [ "list" != "${only}" ] \
  && echo "$(join_by x_fields[@] ,)" \
  || printf "%s\n" "${x_fields[@]}" )
[ -n "${split}" ] && echo "$(join_by x_fields[@] ,)" > "${split}"

# Skip remaining data
if [ "no" == "${only:-no}" ]; then
  if [ 0 -eq ${unique:-0} ]; then cat
  else ${fgrep_backend} -v "$(join_by x_fields[@] ,)"
  fi
fi

# Report success to shell
exit 0
