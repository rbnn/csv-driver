#!/bin/bash

# Author:   Ronny Biemann
#           Copyright 2016
# File:     xjoin
# License:  GPL-3.0

set -e
source xbase
# trap clean_up 0 # EXIT-signal

declare -r program_name=${0##*/}
declare -r getopt_backend=$(find_program_like ${getopt_like_programs[@]})
declare -r join_backend=$(find_program_like ${join_like_programs[@]})
declare -r default_xjoin_no_check_order=no
declare -r default_xjoin_flags=

# Initialize default field-separator
fsep=$(set_fsep)

# Parse command line arguments and feed parsed arguments
declare -r args=$(${getopt_backend} --options=1:2:dhj:t: \
  --longoptions=help,left-prefix:,left-suffix:,right-prefix:,right-suffix:,nocheck-order \
  --name="${program_name}" -- "$@")
eval set -- "${args}"

# Parse arguments
while true; do
  case ${1} in
  -1) # Set left key
    left_field=${2}
    shift 2
    ;;

  -2) # Set right key
    right_field=${2}
    shift 2
    ;;

  -d) # Enable dry-run mode
    dry_run=1
    shift
    ;;

  -j) # Common join field
    left_field=${2}
    right_field=${2}
    shift 2
    ;;

  -t) # Field separator
    fsep=$(set_fsep ${2})
    shift 2
    ;;

  --left-prefix)  # Prefix left columns
    left_prefix=$2
    shift 2
    ;;

  --left-suffix)  # Suffix left columns
    left_suffix=$2
    shift 2
    ;;

  --right-prefix) # Prefix right columns
    right_prefix=$2
    shift 2
    ;;

  --right-suffix) # Suffix right columns
    right_suffix=$2
    shift 2
    ;;

  --nocheck-order) # Force disable check order
    no_check_order=yes
    shift
    ;;

  -h|--help)  # Print help message
    cat << EOF
Usage: ${program_name} [OPT] LEFT RIGHT [-- ...]

Join LEFT and RIGHT file on a common field. The join key is defined by column
names. Therefore both LEFT and RIGHT file must contain a header.

Available flags for OPT:
  -1, -2, -j FIELD
    Join LEFT, RIGHT or both files on FIELD

  -d
    Enable dry-run mode. The backend will not be invoked, but the configured
    command will be written to standard output.

  -t FS
    $(fsep_help_message)

  --left-prefix=STR, --left-suffix=STR
  --right-prefix=STR, --right-suffix=STR
    Add STD as prefix/suffix to LEFT/RIGHT column names

  --nocheck-order
    Do not check that the input is correctly sorted

  -h, --help
    $(help_help_message)

$(getopt_help_message "${program_name}" "${join_backend}" XJOIN_FLAGS "${default_xjoin_flags}")

Backend: ${join_backend}
EOF
    shift
    exit 0
    ;;

  --)
    shift
    break
    ;;
  esac
done

# Non-option arguments are input files
declare -r left_file=${1}
declare -r right_file=${2}
shift 2

[ -z "${left_file}" ] && die -1 "Missing LEFT!"
[ -z "${right_file}" ] && die -1 "Missing RIGHT!"

# Check for double/invalid usage of `-'
if [ "-" == "${left_file}" ] && [ "-" == "${right_file}" ]; then
  die -1 "Cannot read LEFT and RIGHT from stdin!"
fi

# Internally input files must be mapped to fifos. To keep them unique between
# multiple instances, a random temporary directory is created as base for the
# current instance.
declare -r tmpdir=$(mktemp -d)
cleanup_stack+=("rmdir '${tmpdir}'")

# Open left file as file descriptor(fd) 4:
#
# Use xcat to transparently decompress LEFT input into fifo. Afterwards this
# fifo is connected to fd 4.
if [ "-" != "${left_file}" ]; then
  declare -r left_in="${tmpdir}/left_in"
  mkfifo "${left_in}" || die -1 "Cannot create fifo \`${left_in}'!"
  cleanup_stack+=("rm '${left_in}'")

  xcat "${left_file}" > "${left_in}" &
  exec 4< "${left_in}" || die -1 "Cannot map \`${left_file}' to fd 4!"

else
  # LEFT is connected to stdin. Therefor fd 0 will be connected to fd 4.
  exec 4<&0 || die -1 "Cannot map stdin to fd 4!"
fi

# Open right file as file descriptor(fd) 5: See above
if [ "-" != "${right_file}" ]; then
  declare -r right_in="${tmpdir}/right_in"
  mkfifo "${right_in}" || die -1 "Cannot create fifo \`${right_in}'!"
  cleanup_stack+=("rm '${right_in}'")

  xcat "${right_file}" > "${right_in}" &
  exec 5< "${right_in}" || die -1 "Cannot map \`${right_file}' to fd 5!"

else
  # RIGHT is connected to stdin. Therefor fd 0 will be connected to fd 5.
  exec 5<&0 || die -1 "Cannot map stdin to fd 5!"
fi

# Read headers from LEFT and RIGHT input
IFS= read -r left_raw_header <&4
IFS= read -r right_raw_header <&5

# Parse header
# Column names are parsed into x_left_fields and x_right_fields
parse_header "${left_raw_header}" "${fsep}" x_left_
parse_header "${right_raw_header}" "${fsep}" x_right_

# Locate left/right_field in corresponding header.
# Results are stored in x_left/right_index and x_left/right_found
locate_fields x_left_fields[@] x_left_ "${left_field}"
locate_fields x_right_fields[@] x_right_ "${right_field}"

# Apply prefix/suffix for left/right
[ -n "${left_prefix}" ] && add_prefix_to_fields x_left_fields[@] "${left_prefix}" x_left_
[ -n "${left_suffix}" ] && add_suffix_to_fields x_left_fields[@] "${left_suffix}" x_left_
[ -n "${right_prefix}" ] && add_prefix_to_fields x_right_fields[@] "${right_prefix}" x_right_
[ -n "${right_suffix}" ] && add_suffix_to_fields x_right_fields[@] "${right_suffix}" x_right_

# Build output header
# 1. Delete left/right join fields
# 2. Prepend left join field to the output
if [ 0 -eq ${dry_run:-0} ]; then
  declare -r join_field=${x_left_fields[${x_left_index[0]}]}
  delete_fields_by_index x_left_fields[@] x_left_index[@] x_left_
  delete_fields_by_index x_right_fields[@] x_right_index[@] x_right_
  full_header=("${join_field}" ${x_left_fields[@]} ${x_right_fields[@]})
  echo "$(join_by full_header[@] ${fsep})"
fi

# Create temporary files for join-program
declare -r left_fifo="${tmpdir}/left"
declare -r right_fifo="${tmpdir}/right"

mkfifo "${left_fifo}" || die -1 "Cannot create fifo \`${left_fifo}'!"
cleanup_stack+=("rm '${left_fifo}'")

mkfifo "${right_fifo}" || die -1 "Cannot create fifo \`${right_fifo}'!"
cleanup_stack+=("rm '${right_fifo}'")

# Connect file descriptors to fifos
#
# Write data from LEFT/RIGHT into fifo, that will be passed as files to the
# join-backend.
cat <&4 > "${left_fifo}" &
cat <&5 > "${right_fifo}" &

# Configure field-separator in join program
cmd="${join_backend} -t${fsep}"

# Get column-index for left/right join field
declare -ri left_no=$((${x_left_index[0]} + 1))
declare -ri right_no=$((${x_right_index[0]} + 1))
cmd+=" -1${left_no} -2${right_no}"

# Pass input data via fifos
cmd+=" '${left_fifo}' '${right_fifo}'"

# Apply (no-)check-order flag
if [ "yes" == "${no_check_order:-${default_xjoin_no_check_order}}" ]; then
  cmd+=" --nocheck-order"
else cmd+=" --check-order"
fi

# Add non-option arguments and other options
cmd+=" $@ ${XJOIN_FLAGS:-${default_xjoin_flags}}"
declare -r cmd

# If dry-run mode is enabled, cmd will only be echoed
if [ 0 -eq ${dry_run:-0} ]; then eval ${cmd}
else echo "${cmd}"
fi

# Report success to shell
exit 0
